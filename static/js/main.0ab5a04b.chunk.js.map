{"version":3,"sources":["components/Header/index.js","components/PokemonList/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Header","PokemonList","content","map","pokemon","key","name","href","url","capitalize","POKEAPI_URL","App","getManyPokemon","a","fetch","raw","json","data","setState","results","getOnePokemon","state","number","handleChange","e","target","value","className","onClick","this","onChange","type","placeholder","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAoBeA,G,MARA,WACb,OACE,gCACE,uD,OCuBSC,EAhBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,4BACGA,EAAQC,KAAI,SAAAC,GACX,OACE,wBAAIC,IAAKD,EAAQE,MACf,uBAAGC,KAAMH,EAAQI,KACdC,qBAAWL,EAAQE,aCvB5BI,EAAc,qCAmDLC,E,YAhDb,aAAgB,IAAD,8BACb,+CAOFC,eARe,sBAQE,8BAAAC,EAAA,sEAGGC,MAAMJ,GAHT,cAGTK,EAHS,gBAIIA,EAAIC,OAJR,OAITC,EAJS,OAKf,EAAKC,SAAS,CACZd,QAASa,EAAKE,UAND,2CARF,EAkBfC,cAlBe,sBAkBC,8BAAAP,EAAA,sEACIC,MAAM,GAAD,OAAIJ,GAAJ,OAAkB,EAAKW,MAAMC,SADtC,cACRP,EADQ,gBAEKA,EAAIC,OAFT,OAERC,EAFQ,OAGd,EAAKC,SAAS,CACZd,QAAS,CAACa,KAJE,2CAlBD,EA0BfM,aAAe,SAAAC,GACb,EAAKN,SAAS,CACZI,OAAQE,EAAEC,OAAOC,SA1BnB,EAAKL,MAAQ,CACXjB,QAAS,GACTkB,OAAQ,GAJG,E,sEAiCb,OACE,yBAAKK,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQC,QAASC,KAAKjB,gBAAtB,oBACA,4BAAQgB,QAASC,KAAKT,eAAtB,mBAHF,mBAIkB,2BAAOU,SAAUD,KAAKN,aAAcQ,KAAK,SAASC,YAAY,MAC7EH,KAAKR,MAAMjB,QAAQ6B,OAChB,kBAAC,EAAD,CAAa/B,QAAS2B,KAAKR,MAAMjB,UACjC,U,GA1CM8B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ab5a04b.chunk.js","sourcesContent":["import React from 'react'\n\n// class Header extends React.Component {\n//   render () {\n//     return (\n//       <header>\n//         <h1>My Pokemon React App</h1>\n//       </header>\n//     )\n//   }\n// }\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>My Pokemon React App</h1>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { capitalize } from 'lodash'\n\n// class PokemonList extends React.Component {\n//   render () {\n//     return (\n//       <ul>\n//         {this.props.content.map(pokemon => {\n//           return (\n//             <li key={pokemon.name}>\n//               <a href={pokemon.url}>\n//                 {capitalize(pokemon.name)}\n//               </a>\n//             </li>\n//           )\n//         })}\n//       </ul>\n//     )\n//   }\n// }\n\n// const PokemonList = (props) => {\nconst PokemonList = ({ content }) => {\n  return (\n    <ul>\n      {content.map(pokemon => {\n        return (\n          <li key={pokemon.name}>\n            <a href={pokemon.url}>\n              {capitalize(pokemon.name)}\n            </a>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nexport default PokemonList\n","import React from 'react';\nimport './App.scss';\n\nimport Header from '../Header'\nimport PokemonList from '../PokemonList'\n\nconst POKEAPI_URL = 'https://pokeapi.co/api/v2/pokemon/'\n\nclass App extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      pokemon: [],\n      number: 1\n    }\n  }\n\n  getManyPokemon = async () => {\n    // make a GET request to POKEAPI_URL and put the results\n    // into this.state.pokemon\n    const raw = await fetch(POKEAPI_URL)\n    const data = await raw.json()\n    this.setState({\n      pokemon: data.results\n    })\n  }\n\n  getOnePokemon = async () => {\n    const raw = await fetch(`${POKEAPI_URL}${this.state.number}`)\n    const data = await raw.json()\n    this.setState({\n      pokemon: [data]\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      number: e.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Header />\n        <button onClick={this.getManyPokemon}>Get Many Pokemon</button>\n        <button onClick={this.getOnePokemon}>Get One Pokemon</button>\n        Pokemon Number: <input onChange={this.handleChange} type=\"number\" placeholder=\"1\" />\n        {this.state.pokemon.length\n          ? <PokemonList content={this.state.pokemon} />\n          : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}